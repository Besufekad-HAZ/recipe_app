#!/usr/bin/env ruby
# frozen_string_literal: true

#
# This file was generated by Bundler.
#
# The application 'bundle' is installed as part of a gem, and
# this file is here to facilitate running it.
#

require 'rubygems'

module BundlerLauncher
  # This module provides methods for launching the Bundler application.
  module_function

  # Check if the launcher was invoked as a script.
  def invoked_as_script?
    File.expand_path($PROGRAM_NAME) == File.expand_path(__FILE__)
  end

  # Retrieve the Bundler version specified as an environment variable.
  def env_var_version
    ENV['BUNDLER_VERSION']
  end

  # Retrieve the Bundler version specified as a command-line argument.
  def cli_arg_version
    return unless invoked_as_script?
    return unless ARGV.first.to_s.start_with?('update')

    bundler_version = nil
    update_index = nil
    ARGV.each_with_index do |a, i|
      if update_index && update_index.succ == i && a =~ Gem::Version::ANCHORED_VERSION_PATTERN
        bundler_version = a
      elsif a =~ /\A--bundler(?:[= ](#{Gem::Version::VERSION_PATTERN}))?\z/
        bundler_version = Regexp.last_match(1)
        update_index = i
      end
    end

    bundler_version
  end

  # Retrieve the path to the Gemfile.
  def gemfile
    gemfile = ENV['BUNDLE_GEMFILE']
    return gemfile unless gemfile.nil? || gemfile.empty?

    File.expand_path('../Gemfile', __dir__)
  end

  # Retrieve the path to the lockfile.
  def lockfile
    case File.basename(gemfile)
    when 'gems.rb' then gemfile.sub(/\.rb$/, '.locked')
    else "#{gemfile}.lock"
    end
  end

  # Retrieve the Bundler version specified in the lockfile.
  def lockfile_version
    return unless File.file?(lockfile)

    lockfile_contents = File.read(lockfile)
    return unless lockfile_contents =~ /\n\nBUNDLED WITH\n\s{2,}(#{Gem::Version::VERSION_PATTERN})\n/

    Regexp.last_match(1)
  end

  # Determine the required Bundler version.
  def bundler_requirement
    @bundler_requirement ||= begin
      env_var_version || cli_arg_version || bundler_requirement_for(lockfile_version)
    end
  end

  # Determine the required Bundler version based on the lockfile version.
  def bundler_requirement_for(version)
    return "#{Gem::Requirement.default}.a" unless version

    bundler_gem_version = Gem::Version.new(version)

    bundler_gem_version.approximate_recommendation
  end

  # Load Bundler and activate the required version.
  def load_bundler!
    ENV['BUNDLE_GEMFILE'] ||= gemfile

    activate_bundler
  end

  # Activate the required Bundler version.
  def activate_bundler
    gem_error = activation_error_handling do
      gem 'bundler', bundler_requirement
    end

    return if gem_error.nil?

    require_error = activation_error_handling do
      require 'bundler/version'
    end

    if require_error.nil? && Gem::Requirement.new(bundler_requirement).satisfied_by?(Gem::Version.new(Bundler::VERSION))
      return
    end

    warn "Activating bundler (#{bundler_requirement}) failed:\n#{gem_error.message}\n\nTo install the version of bundler this project requires, run `gem install bundler -v '#{bundler_require
